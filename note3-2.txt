1.游戏制作大部分的工作量都集中在了制作游戏引擎上。一款游戏引擎其实就是一款游戏的全部。只不过把曾经写过的代码工具化，以方便以后使用。
选择一块游戏殷勤可以几乎不用再写代码就可以开发出一块游戏，但相当于eclipse于java。UFT或者LoadRunner与性能自动化测试的关系。可以自动生成那些重复的代码，但是这些代码有很重要。
因此从零开始一开一块游戏，其实就是在开发一款游戏引擎。而不需要引擎也能开发游戏，然后把开发的游戏重复性的东西进行封装，以方便以后别的游戏可以拿来使用。
现在让你不用eclipse去写java，你愿意吗？让你不用引擎去写游戏，你愿意吗？因此现在做游戏其实是很简单的，几乎没有程序员什么事儿了。但是引擎却几乎都是程序员干的事儿。
一个公司，应该有自己的自主引擎，这样才能开发出自己特色的游戏。但是也可以用的别的游戏，大概和开发别的项目是选着框架或者工具差不多。引擎其实就是sdk。引擎工具界面其实就是adt。
找一块合适的引擎可以省下90%的工作效率。一个游戏开发1年和开发10年自然不一样。
也就是说我一直在尝试的不是开发游戏，而是开发游戏引擎，我的目标可以改变了。呵呵。
可以卖游戏，也可以卖游戏引擎。
它里面比如俺会有很多技术需要攻克。

两个游戏的游戏引擎一样，其实就是同一块游戏，就是换了下界面而已。--就像写小说，换了一下人名，东西还一样。就像其他项目，改了一下界面，地下的东西还一样。

把一切东西不断地提炼，而出来的产物。小说可以借鉴吗？不得而知。

自己做一个产品，去发布，然后又承接不用的项目，将自己发布的这个产品改改界面和相应功能，作为项目卖给其他公司。 --等于游戏引擎的套路
一个项目不可能只有一种语言，也不可能只有一种技术，是很多语言和很多技术的混合使用。各自发挥优势。

2.单机版的项目和C/S架构的项目或者B/s架构的项目有什么不同呢？？？
  单机版是把 业务层，已经模型层放在本地，但是大多时候不需要对模型层的数据进行持久化，或者简单的进行一些持久化工作。展示层肯定有不用说，没有展示层其实也无所谓。
  B/S架构分为大多是瘦客户端，他的业务层和模型层放到了服务器端，和客户端中加通过网络连接。当然数据组织和展示还是在客户端，在本地。
  C/S架构，一般是富客户端，他的一部分业务层在本地，业务层优先在本地，但是他的模型层和一些无法再本地的业务层在服务器，中间通过网络连接。数据组织和展示依旧在本地，在客户端。
  除此之外，还有分布式架构。
  
3.之前参加过一个培训，一位已经有30年项目开发管理的导师说，好的函数不超过14行。。14行每一行的功能都很清晰。
追问
这个估计14行是不太可能的吧。。
追答
这些只是个平均值，实际应该是告诉你，函数里面的每一行代码都很清晰的告诉别人去干什么。。那个导师说，好的函数是不用大篇注释的，难道我们就不用注释了？ 

字面意思是这样，含义还要自己理解。

从你问问题的方式我不准备从专业的角度来解释这个事。拿计算机来类比一下。
人的记忆有所两种，有说三种的，区别是说三种的多了一个感觉记忆，感受下眨眼留下的残像。两种就是短期记忆和长期记忆。
短期记忆类似于电脑的内存条，开机就工作，关机就清零，所以短期记忆也叫工作记忆。有四个单位的记忆容量限制。（我确定是4，不是5±2）
长期记忆就像电脑硬盘，不过和硬盘不同的是长期记忆不是精准提取，经常发生错误。
首先人并不是把所有的东西都记下来，任何信息都经过从短期记忆到长期记忆的过程，大部分信息都像内存一样在你注意其他信息的时候将之前的信息删除了。
有一部分信息经过短期记忆变成长期记忆，这里就有很多的影响因素，像不断重复，情绪化记忆，有意识识记，有更多记忆和提取点的信息等等，更容易进入长期记忆。
你说人一生能记多少东西， 从神经学上长期记忆是一种叫LTP的现象，就是神经细胞膜结构发生了变化形成的回路，准确的说是突触变化，一个神经细胞有一个轴突和很多树突，树突上有长了很多小脚，而且可以不断长，人有1200亿的神经细胞，即使储存记忆的区域（主要在颞叶）占比较少，按几十亿来算，那得多少触角啊，理论上来说记忆上限是无限的

我们都有过备战考试的经验——在某一时刻,大脑似乎已经被塞满,再也装不进任何东西。大脑储存记忆的数量有上限吗?

　　人类大脑中约有10亿个神经元,每个神经元与其他神经元之间形成1000个联结——这意味着人类大脑中的连接超过1万亿个。如果每个神经元只参与储存一个记忆,那么大脑被各种记忆塞满是迟早的事情。但是,神经元相互联系的程度超乎想象,每个神经元同时参与储存多个记忆,是大脑储存记忆的能力呈指数增长。如果把人类大脑比作数字录像机,它能够录制的电视节目将超过300万小时,可连续播放300年以上。

　　很难计算大脑储存记忆的能力到底有多大。首先我们无法计算单个记忆所需要的存储空间。其次,某些记忆包含许多细节,往往需要更多的储存空间；另一些记忆逐渐被遗忘,又可以释放出一些空间。可以肯定的是,人类大脑储存记忆的数量有一个上限,但数值非常大,因此我们根本无需杞人忧天,担心有一天大脑会被记忆塞满。

4. Android studio 中将多个module放到一个文件夹中，方便管理，方法：
   1.在项目的根目录下见一个module，和平时创建module的方法一样。
   2.创建需要的文件夹，可以是多级的。
   3.将我们建立的module拖到相应的目录下。
   4.在setting.gradle文件中将原来include 'modulename'改为 include ':foldername1:foldername2:modulename' 点击同步就可以了。
   5.在相应的目录下会生成*.iml文件。
   
5. Android studio中一个module要依赖另一个module，在依赖之前，把要依赖的module的library类型的
   1.build.gradle中将 apply plugin: 'com.android.application' 改为 apply plugin: 'com.android.library' 并把 android{ defaultConfig {中的 applicationId 这一行注释掉}}
   2.将被作为lib的项目的manifestxml文件中Activity的intent-filter Main去掉，不然会有两个入口指向两个MainActivity,如下
    <!--
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
    -->
	
	甚至最好也直接把lib module的MainActivity删掉。
6. 使用v7包下的AppCompatActivity比使用普通的Activity的好处就说了，要使用AppCompatActivity的ActionBar，可以使用下面的语句获得
   android.support.v7.app.ActionBar actionBar = getSupportActionBar(); 一定要是android.support.v7.app包下的。
   
   
   // SystemProperties.set("ctl.start","bootanim");
       /* try {
            Class<?> systemProperties = Class.forName("android.os.SystemProperties");
            Method set = systemProperties.getMethod("set",String.class,String.class);
            //静态方法第一个参数为null
           // set.invoke(null,"ctl.start","modematserver"); ueventd
            set.invoke(null,"ctl.start","bootanim");//手动在adb去启动试试研究一下 init.rc和ctl.start ,已经研究清楚了，init,rc大致等于windows下的注册表，但是要更改它需要系统权限，ctl.start相当于启动服务的命令
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }*/
    }
    // 1.to look up at; to lift up one's eyes; to raise one's eyes
    // 2.to respectfully seek or expect guidance
    // I look up at the sky. and overlook the ground.
    //I kown English buautifuly. I seem  opean the door of another world.
    //kan wan na ji ge shi pin ,jiu keyi le.
	
