1. 注释尽量符合javadoc标准，或者有没有别的生成doc的方法？

2.想删除一个module，直接删除它根目录下的*.iml文件

3. 在D:\Android\sdk\platform-tools\signapkonline_20160715 将要进行系统签名的APK放到该目录下，使用命令 java -jar signapkonline.jar --min-sdk-version 23 rnd-signserver.huawei.com m00260298 2wsx@WSX! platform.x509.pem /root/Key/huawei_apkkey_old/platform old.apk new.apk即可。签名后，apk将拥有系统权限。

4. Class<?> systemProperties = Class.forName("android.os.SystemProperties");
            Method set = systemProperties.getMethod("set",String.class,String.class);
            set.invoke(null,"ctl.start","bootanim");//// set.invoke(null,"ctl.start","modematserver");


1.方法内部类不能使用它所在方法中的变量，要使用，必须将他所在方法的变量加上final关键字，但是方法内部类中可以使用它外部方法所在的类的中的变量，而不需要加。


2.类的抽取，方法的抽取隔离，封装，内部属性的生命周期和作用域以及其关键字的选取。
工具类和业务类的抽取和封装。
 //我现在main()方法中将这块功能的代码按照步骤去完成了这个功能。然后执行了一遍，确认无误。
 //考虑到这块比较独立，可以作为一个独立的类，我就创建了一个类，将这块代码复制到了新创建的类中的构造函数中，new这个类的对象的时候调用，也可以执行。
 //创建了一个方法，在这个类中的构造方法中调用，功能没问题。
 //审查这个功能的方法中用到的变量，考虑他们的生命周期和作用域，是和类的生命周期一致，且作用域未这个类，则提取为成员变量；就临时用那么一次的就不管他了，缩写一下变量名。需要独立且全局唯一一份的，就加上static。
 //将这个功能的各个步骤，审查一遍，找到了那些一成不变的步骤，将他们分成一个个的函数。给他们起一个名字。CTRL+ALT+M可抽取。需要改变的步骤则不去管他。
 //审查新分成的方法中，用的数据和变量相对于类是确定的还是不确定的，不确定的就作为参数传过来。
 //审查这些新分成的方法，需不需要在JVM加载是调用且调用仅一次，是的话就写成static代码块。它的作用域和生命周期是和类一直的就不变。它是独立于类切全局唯一的就加上static关键字。（他的访问权限视情况考虑吧）
 //封装完成。就可以在别的类中使用了，他的对象生命周期和作用域就看依赖他的类了。因为他已经成了完整的独立的个体。然后再进入设计模式，考虑他的内聚和耦合度。
 //他已经成了一个类变量，按照上面的步骤，继续去封装它依赖他的类。一步一步，最后完成整个项目。

private void testATCmd() {
        // step 2:Instance a object of LocalSocket
        LocalSocket mLocalSocket = new LocalSocket();

        // step 3:Instance a object of Server Address
        LocalSocketAddress lsa = new LocalSocketAddress("HsaAtLocalSocket", LocalSocketAddress.Namespace.ABSTRACT);

        // step 4.local socket connect server socket through address & namespace
        try {
            mLocalSocket.connect(lsa);
        } catch (IOException e) {
            e.printStackTrace();
        }

        // step 5: get OutputStream from connected LocalSocket
        OutputStream os = null;
        try {
            os = mLocalSocket.getOutputStream();
        } catch (IOException e) {
            e.printStackTrace();
        }

        // step 6: write data to server & flush
        byte[] data = "AT+ECID=0\r\n".getBytes();
        try {
            mLocalSocket.setReceiveBufferSize(data.length);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            mLocalSocket.setSendBufferSize(data.length);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            os.write(data);
            os.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }

        // step 7: get InputStream from connected LocalSocket
        InputStream is = null;
        InputStreamReader isr = null;
        try {
            is = mLocalSocket.getInputStream();
            isr = new InputStreamReader(is);
        } catch (IOException e) {
            e.printStackTrace();
        }

        // step 8: read result from socket that return server
        char[] buf = new char[4096];
        try {
            int readBytes = isr.read(buf);
            Toast.makeText(this,readBytes+"",Toast.LENGTH_SHORT).show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


3.多个异常连接 判断并返回成功和是北海异常 return false； 全通过  return true；

4.Java的io包里面的stream和reader，都用的是装饰者模式。你只需要调用最外层装饰者的close方法，它就能将其所装饰的stream或者reader也一并关闭

